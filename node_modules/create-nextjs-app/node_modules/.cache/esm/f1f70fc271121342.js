let fs,resolve,join,kleur,inquirer,stripIndent,spawn,generatePackageJSON,copyfiles,questions;_711‍.w("fs-extra",[["default",["fs"],function(v){fs=v}]]);_711‍.w("path",[["resolve",["resolve"],function(v){resolve=v}],["join",["join"],function(v){join=v}]]);_711‍.w("kleur",[["default",["kleur"],function(v){kleur=v}]]);_711‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_711‍.w("common-tags/lib/stripIndent",[["default",["stripIndent"],function(v){stripIndent=v}]]);_711‍.w("./exec",[["default",["spawn"],function(v){spawn=v}]]);_711‍.w("./generatePackageJSON",[["default",["generatePackageJSON"],function(v){generatePackageJSON=v}]]);_711‍.w("./copyFiles",[["default",["copyfiles"],function(v){copyfiles=v}]]);_711‍.w("./questions",[["default",["questions"],function(v){questions=v}]]);










const init = async () => {
  const answers = await inquirer.prompt(questions);
  const { dirName, useNPM, useDefaults, useCanary } = answers;

  const packageManager = useNPM ? 'npm' : 'yarn';

  if (await fs.exists(dirName)) {
    _711‍.g.console.log(kleur.bgRed(`'${dirName}' directory already exists`));
    process.exit(1);
  }

  await fs.mkdir(dirName);
  await process.chdir(dirName);

  copyfiles(resolve(__dirname, '../template'), '.');

  await spawn(packageManager, ['init', useDefaults ? '-y' : '']);

  const pkgPath = join(process.cwd(), 'package.json');

  const pkg = require(pkgPath);

  const newPKG = await generatePackageJSON(pkg, useCanary);

  await fs.writeFile(pkgPath, newPKG);

  _711‍.g.console.log(kleur.green`▲ Booststrapping your project`);
  await spawn(packageManager, ['install']);

  _711‍.g.console.log(
    kleur.blue(stripIndent`
      Application initialized:
      ▲ cd into your project: cd ./${dirName}
      ▲ start your application: ${packageManager} run dev
    `)
  );
};

init();
